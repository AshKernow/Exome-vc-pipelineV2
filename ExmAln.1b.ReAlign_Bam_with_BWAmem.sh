#!/bin/bash
#$ -cwd -pe smp 6 -l mem=2G,time=12:: -N BamBWABam

#This script takes a bam file and reverts it to sam format and then realigns with BWA mem
#	InpFil - (required) - Path to Bam file to be aligned. Alternatively a file with a list of bams can be provided and the script run in an array job. List file name must end ".list"
#	RefFiles - (required) - shell file to export variables with locations of reference files and resource directories; see list below
#	LogFil - (optional) - File for logging progress
#	TgtBed - (optional) - Exome capture kit targets bed file (must end .bed for GATK compatability) - only required if calling pipeline
#	PipeLine - P -(flag) - will start the GATK realign and recalibrate pipeline using the files generated by this script
#	Help - H - (flag) - get usage information

#list of required reference files:
# $REF - reference genome in fasta format - must have been indexed using 'bwa index ref.fa'
# $EXOMPPLN - directory containing exome analysis pipeline scripts, 

#list of required tools:
# samtools <http://samtools.sourceforge.net/> <http://sourceforge.net/projects/samtools/files/>
# bwa mem <http://bio-bwa.sourceforge.net/> <http://sourceforge.net/projects/bio-bwa/files/>
# picard <http://picard.sourceforge.net/> <http://sourceforge.net/projects/picard/files/>
# HTSlib <https://github.com/samtools/htslib> <https://github.com/samtools/htslib/archive/master.zip>

## This file also require exome.lib.sh - which contains various functions used throughout my Exome analysis scripts; this file should be in the same directory as this script

## Note that htscmd bam2fq will generate a warning:
##    [W::bam_hdr_read] EOF marker is absent. The input is probably truncated.
## This is not a problem, it is just a bug related to piping the stdin as the input, it can be ignored
###############################################################

#set default arguments
usage="
ExmAln.1b.ReAlign_Bam_with_BWAmem.sh -i <InputFile> -r <reference_file> -l <logfile> -PH

	 -i (required) - Path to Bam file to be aligned or \".list\" file containing a multiple paths
	 -r (required) - shell file to export variables with locations of reference files and resource directories
	 -l (optional) - Log file
	 -t (optional) - Exome capture kit targets or other genomic intervals bed file (must end .bed for GATK compatability); this file is required if calling the pipeline but otherwise can be omitted
	 -P (flag) - Initiate exome analysis pipeline after completion of script
	 -H (flag) - echo this message and exit
"

PipeLine="false"

#get arguments
while getopts i:r:l:t:PH opt; do
	case "$opt" in
		i) InpFil="$OPTARG";;
		r) RefFil="$OPTARG";; 
		l) LogFil="$OPTARG";;
		t) TgtBed="$OPTARG";; 
		P) PipeLine="true";;
		H) echo "$usage"; exit;;
	esac
done

#load RefFil file
source $RefFil #load the references required
#Load script library
source $EXOMPPLN/exome.lib.sh

#check all required paramaters present
if [[ ! -e $InpFil ]] || [[ ! -e $RefFil ]]; then echo "Missing required arguments"; echo "$usage"; exit; fi

#set local variables
funcFilfromList
BamFil=`readlink -f $InpFil` #resolve absolute path to bam
BamNam=`basename $BamFil` 
BamNam=${BamNam/.bam/} # a name for the output files
BamNam=${BamNam/.list/} 
if [[ -z $LogFil ]]; then LogFil=$BamNam.BbB.log; fi # a name for the log file
TmpLog=$LogFil.temp.log #temporary log file
AlnDir=wd.$BamNam.align # directory in which processing will be done
AlnFil=$BamNam.bwamem.bam #filename for bwa-mem aligned file
SngFil=$BamNam.singletons #output file for the singletons to be dumped to
SrtFil=$BamNam.bwamem.sorted.bam #output file for sorted bam
DdpFil=$BamNam.bwamem.mkdup.bam #output file with PCR duplicates marked
FlgStat=$BamNam.bwamem.flagstat #output file for bam flag stats
IdxStat=$BamNam.idxstats #output file for bam index stats
TmpDir=$BamNam.javatempdir
mkdir -p $AlnDir # create working directory
cd $AlnDir # move into working directory

#start log
ProcessName="Align with BWA"
funcWriteStartLog
echo " Build of reference files: "$BUILD >> $TmpLog
echo "----------------------------------------------------------------" >> $TmpLog

#get ReadGroupHeader from input BAM
RgHeader=$(samtools view -H $BamFil | grep ^@RG | awk '{ gsub("\t","\\t") } { print }')
echo "ReadGroup header: $RgHeader" >> $TmpLog
if [[ $RgHeader == "" ]]||[[ $(echo "$RgHeader" | wc -l) -gt 1 ]]; then #check that we have a  RG header and if not write a warning to the log file
	echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" >> $TmpLog
	echo "     Problem with ReadGroup header" >> $TmpLog
	echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" >> $TmpLog
fi

###Align using BWA mem algorithm
# use HTSlib to shuffle the bam | then tranform it to an interleaved fastq discarding an singletons to a separate file as they mess up the interleaving | transform sam back to bam
StepName="Align with BWA mem"
StepCmd="htscmd bamshuf -uOn 128 $BamFil tmp |
 htscmd bam2fq -s $SngFil -aO - |
 gzip | bwa mem -M -R \"$RgHeader\" -t 6 -p $REF - |
 htscmd samview -bS - > $AlnFil"
funcRunStep

#Sort the bam file by coordinate
StepName="Sort Bam using PICARD"
StepCmd="java -Xmx4G -Djava.io.tmpdir=$TmpDir -jar $PICARD/SortSam.jar
 INPUT=$AlnFil
 OUTPUT=$SrtFil
 SORT_ORDER=coordinate
 CREATE_INDEX=TRUE"
funcRunStep
rm $AlnFil

#Mark the duplicates
StepName="Mark PCR Duplicates using PICARD"
StepCmd="java -Xmx4G -Djava.io.tmpdir=$TmpDir -jar $PICARD/MarkDuplicates.jar
 INPUT=$SrtFil
 OUTPUT=$DdpFil
 METRICS_FILE=$DdpFil.dup.metrics.txt
 CREATE_INDEX=TRUE"
funcRunStep
rm $SrtFil ${SrtFil/bam/bai}

#Get flagstat
StepName="Output flag stats using Samtools"
StepCmd="samtools flagstat $DdpFil > $FlgStat"
funcRunStep

#get index stats
StepName="Output idx stats using Samtools"
StepCmd="samtools idxstats $DdpFil > $IdxStat"
funcRunStep

#Final CleanUp
funcWriteEndLog
rm $TmpLog $TmpDir
